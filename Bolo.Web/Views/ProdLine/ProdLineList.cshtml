@model ProdLineVM;

@{
    ViewData["Page"] = "Production Line";
    ViewData["View"] = "Production Line List";
}
<!-- Start::row-1 -->
<div class="row">
    <div class="col-md-12">
        <div class="card custom-card mg-b-20">
            <div class="card-header">
                <div class="card-title">Treeview</div>
            </div>
            <div class="card-body">
                <div class="card-content">
                    <div class="row">
                        <ul id="menu" class="menu"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .menu, .submenu {
        list-style-type: none;
        padding-left: 20px;
    }

    .draggable {
        cursor: move;
    }
</style>
@section scripts
{
    <script>
        const menuModel = [
            {
                id: 1,
                title: "Menu 1",
                children: [
                    {
                        id: 2,
                        title: "Submenu 1.1",
                        children: []
                    },
                    {
                        id: 3,
                        title: "Submenu 1.2",
                        children: []
                    }
                ]
            },
            {
                id: 4,
                title: "Menu 2",
                children: []
            }
        ];
        function renderMenu(menu, container) {
            menu.forEach(item => {
                const li = $('<li>').attr('data-id', item.id).addClass('draggable').text(item.title);
                if (item.children && item.children.length > 0) {
                    const ul = $('<ul>').addClass('submenu');
                    renderMenu(item.children, ul);
                    li.append(ul);
                }
                container.append(li);
            });
        }

        $(function () {
            renderMenu(menuModel, $('#menu'));

            $('.draggable').draggable({
                revert: true
            });

            $('.submenu').droppable({
                accept: '.draggable',
                drop: function (event, ui) {
                    const draggedId = ui.helper.data('id');
                    const targetId = $(this).closest('li').data('id');
                    console.log('Dropped item', draggedId, 'on', targetId);
                    // Here you would update the model and re-render the menu
                }
            });
        });

        function updateMenuModel(draggedId, targetId) {
            // Find the dragged item and remove it from its current position
            let draggedItem;
            function removeItem(menu, id) {
                for (let i = 0; i < menu.length; i++) {
                    if (menu[i].id === id) {
                        draggedItem = menu.splice(i, 1)[0];
                        return true;
                    }
                    if (menu[i].children) {
                        if (removeItem(menu[i].children, id)) {
                            return true;
                        }
                    }
                }
                return false;
            }
            removeItem(menuModel, draggedId);

            // Find the target item and add the dragged item as its child
            function addItem(menu, id, item) {
                for (let i = 0; i < menu.length; i++) {
                    if (menu[i].id === id) {
                        menu[i].children.push(item);
                        return true;
                    }
                    if (menu[i].children) {
                        if (addItem(menu[i].children, id, item)) {
                            return true;
                        }
                    }
                }
                return false;
            }
            addItem(menuModel, targetId, draggedItem);

            // Re-render the menu
            $('#menu').empty();
            renderMenu(menuModel, $('#menu'));
            $('.draggable').draggable({
                revert: true
            });
            $('.submenu').droppable({
                accept: '.draggable',
                drop: function (event, ui) {
                    const draggedId = ui.helper.data('id');
                    const targetId = $(this).closest('li').data('id');
                    updateMenuModel(draggedId, targetId);
                }
            });
        }
    </script>
}
